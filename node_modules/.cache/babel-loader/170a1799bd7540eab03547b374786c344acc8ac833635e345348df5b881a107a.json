{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\Project\\\\Global-CO2-Emissions-w-Dashbaoard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from './components/Chart';\nimport CountrySelector from './components/CountrySelector';\nimport PredictionChart from './components/PredictionChart';\nimport CO2Summary from './components/CO2Summary';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE = \"http://127.0.0.1:8000\"; // Central base URL\n\nfunction App() {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [selected, setSelected] = useState(\"Philippines\");\n  const [data, setData] = useState([]);\n  const [predicted, setPredicted] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch country list once on mount\n  useEffect(() => {\n    axios.get(`${API_BASE}/countries`).then(res => setCountries(res.data)).catch(err => setError(\"Failed to fetch countries\"));\n  }, []);\n\n  // Fetch data + prediction when selected country changes\n  useEffect(() => {\n    if (!selected) return;\n    const fetchCountryData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const [dataRes, predRes] = await Promise.all([axios.get(`${API_BASE}/data/${selected}`), axios.get(`${API_BASE}/predict/${selected}`)]);\n        setData(dataRes.data);\n        setPredicted(predRes.data);\n      } catch (err) {\n        setError(\"Failed to load country data\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCountryData();\n  }, [selected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83C\\uDF0D CO\\u2082 Emissions Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-600\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CountrySelector, {\n      countries: countries,\n      selected: selected,\n      setSelected: setSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-600 mt-4\",\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Chart, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PredictionChart, {\n        data: predicted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"teO1tRRNZgcSZGD4aWgOMA5ozws=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","CountrySelector","PredictionChart","CO2Summary","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE","App","_s","countries","setCountries","selected","setSelected","data","setData","predicted","setPredicted","loading","setLoading","error","setError","get","then","res","catch","err","fetchCountryData","dataRes","predRes","Promise","all","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Github/Project/Global-CO2-Emissions-w-Dashbaoard/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Chart from './components/Chart';\r\nimport CountrySelector from './components/CountrySelector';\r\nimport PredictionChart from './components/PredictionChart';\r\nimport CO2Summary from './components/CO2Summary';\r\n\r\nconst API_BASE = \"http://127.0.0.1:8000\"; // Central base URL\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [selected, setSelected] = useState(\"Philippines\");\r\n  const [data, setData] = useState([]);\r\n  const [predicted, setPredicted] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch country list once on mount\r\n  useEffect(() => {\r\n    axios.get(`${API_BASE}/countries`)\r\n      .then(res => setCountries(res.data))\r\n      .catch(err => setError(\"Failed to fetch countries\"));\r\n  }, []);\r\n\r\n  // Fetch data + prediction when selected country changes\r\n  useEffect(() => {\r\n    if (!selected) return;\r\n\r\n    const fetchCountryData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const [dataRes, predRes] = await Promise.all([\r\n          axios.get(`${API_BASE}/data/${selected}`),\r\n          axios.get(`${API_BASE}/predict/${selected}`)\r\n        ]);\r\n        setData(dataRes.data);\r\n        setPredicted(predRes.data);\r\n      } catch (err) {\r\n        setError(\"Failed to load country data\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCountryData();\r\n  }, [selected]);\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">üåç CO‚ÇÇ Emissions Dashboard</h1>\r\n\r\n      {error && <p className=\"text-red-600\">{error}</p>}\r\n\r\n      <CountrySelector\r\n        countries={countries}\r\n        selected={selected}\r\n        setSelected={setSelected}\r\n      />\r\n\r\n      {loading ? (\r\n        <p className=\"text-gray-600 mt-4\">Loading data...</p>\r\n      ) : (\r\n        <>\r\n          <Chart data={data} />\r\n          <PredictionChart data={predicted} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjD,MAAMC,QAAQ,GAAG,uBAAuB,CAAC,CAAC;;AAE1C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,aAAa,CAAC;EACvD,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACwB,GAAG,CAAC,GAAGf,QAAQ,YAAY,CAAC,CAC/BgB,IAAI,CAACC,GAAG,IAAIb,YAAY,CAACa,GAAG,CAACV,IAAI,CAAC,CAAC,CACnCW,KAAK,CAACC,GAAG,IAAIL,QAAQ,CAAC,2BAA2B,CAAC,CAAC;EACxD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAxB,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,QAAQ,EAAE;IAEf,MAAMe,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnCR,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACF,MAAM,CAACO,OAAO,EAAEC,OAAO,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC3CjC,KAAK,CAACwB,GAAG,CAAC,GAAGf,QAAQ,SAASK,QAAQ,EAAE,CAAC,EACzCd,KAAK,CAACwB,GAAG,CAAC,GAAGf,QAAQ,YAAYK,QAAQ,EAAE,CAAC,CAC7C,CAAC;QACFG,OAAO,CAACa,OAAO,CAACd,IAAI,CAAC;QACrBG,YAAY,CAACY,OAAO,CAACf,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOY,GAAG,EAAE;QACZL,QAAQ,CAAC,6BAA6B,CAAC;MACzC,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDQ,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACf,QAAQ,CAAC,CAAC;EAEd,oBACER,OAAA;IAAK4B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB7B,OAAA;MAAI4B,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEtEjB,KAAK,iBAAIhB,OAAA;MAAG4B,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAEb;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEjDjC,OAAA,CAACJ,eAAe;MACdU,SAAS,EAAEA,SAAU;MACrBE,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA;IAAY;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,EAEDnB,OAAO,gBACNd,OAAA;MAAG4B,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAErDjC,OAAA,CAAAE,SAAA;MAAA2B,QAAA,gBACE7B,OAAA,CAACL,KAAK;QAACe,IAAI,EAAEA;MAAK;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrBjC,OAAA,CAACH,eAAe;QAACa,IAAI,EAAEE;MAAU;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACpC,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5B,EAAA,CA7DQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA+DZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}